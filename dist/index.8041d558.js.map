{"mappings":"AAAO,MAGMA,EAAc,CAAEC,IAAK,QAASC,KAAM,OCepCC,EAA4BC,eAAgBC,GACvD,IACE,MAAMC,QAAiBC,QAAQC,KAAK,CAACC,MAAMJ,IAVHK,EDTT,GCU1B,IAAIH,SAAQ,SAAUI,EAAGC,GAC9BC,YAAW,WACTD,EAAO,IAAIE,MAAM,wCAAwCJ,Y,GACpD,IAAJA,E,OAOGK,QAAqBT,EAAIU,OAC/B,IAAKV,EAAIW,GAAI,MAAM,IAAIH,MAAM,GAAGR,EAAIY,YAAYZ,EAAIa,WACpD,OAAOJ,C,CACP,MAAOK,GACP,MAAMA,C,CAfwB,IAAUV,C,ECF/BW,EAAwB,CACnCC,WAAY,EACZC,UAAW,YAGAC,EAAiBpB,iBAC5B,IACE,MAAMW,QAAqBZ,EFfA,2FEgB3BkB,EAAMC,WAAaP,C,CACnB,MAAOK,GACP,MAAMA,C,OCSVK,EAAe,IAzBf,MACEC,SAAwBC,SAASC,iBAAiB,WAClDC,aAA+B,wCAE/BC,SACEC,KAAKL,SAASM,SAAQC,GAAMA,EAAGC,UAAUC,IAAI,W,CAG/CC,QACEL,KAAKL,SAASM,SAAQC,IACpBA,EAAGC,UAAUG,OAAO,SAAU,MAAO,QAAQ,G,CAIjDC,aAAoBC,GAClBR,KAAKK,QACL,MAAMI,EAAmBD,EAAOE,MAAM,IACtCV,KAAKL,SAASM,SAAQ,CAACC,EAASS,IAC9BF,EAAOG,MAAK,CAAChC,EAAGiC,IAAqBA,IAAaF,KAAUG,SAAS,KACjEZ,EAAGC,UAAUC,IAAInC,EAAOE,MACxB+B,EAAGC,UAAUC,IAAInC,EAAOC,M,GCnBlC,MAAM6C,EAAsB1C,iBAC1B,IAEEqB,EAAgBK,eACVN,IFemB,WAC3B,MAAMuB,EAAsBC,OAAO3B,EAAMC,YAAY2B,SAAS,GACxDC,EFtB6B,EEsBIH,EAAYG,OACnD7B,EAAME,UAAY,GAAG,IAAI4B,OAAOD,KAAUH,IAC1CK,OAAOC,SAASC,KAAO,GAAGjC,EAAME,W,CEhB9BgC,GAGA9B,EAAgBa,aAAajB,EAAYE,U,CACzC,MAAOH,GACPoC,QAAQC,IAAIrC,E,GAKdsC,aAAY,IAAMZ,KAAuB","sources":["src/ts/config.ts","src/ts/helpers.ts","src/ts/model.ts","src/ts/views/traficLightView.ts","src/ts/controller.ts"],"sourcesContent":["export const API_URL: string = `https://www.random.org/integers/?num=1&min=0&max=255&col=1&base=10&format=plain&rnd=new`;\nexport const TIMEOUT_SEC: number = 10;\nexport const BINARY_LENGTH: number = 8;\nexport const COLORS: any = { one: 'green', zero: 'red' };\n","import { TIMEOUT_SEC } from './config';\n\ninterface timeoutInterface {\n  (s: number);\n}\n\ninterface getJSONInterface {\n  (url: string);\n}\n\nconst timeout: timeoutInterface = function (s) {\n  return new Promise(function (_, reject) {\n    setTimeout(function () {\n      reject(new Error(`Request took too long! Timeout after ${s} second`));\n    }, s * 1000);\n  });\n};\n\nexport const getJSON: getJSONInterface = async function (url) {\n  try {\n    const res: any = await Promise.race([fetch(url), timeout(TIMEOUT_SEC)]);\n    const data: number = await res.json();\n    if (!res.ok) throw new Error(`${res.message} (${res.status})`);\n    return data;\n  } catch (err) {\n    throw err;\n  }\n};\n","import { getJSON } from './helpers';\nimport { API_URL, BINARY_LENGTH } from './config';\n\ninterface StateInterface {\n  decimalNum: number;\n  binaryNum: string;\n}\n\nexport const State: StateInterface = {\n  decimalNum: 0,\n  binaryNum: '00000000',\n};\n\nexport const generateNumber = async function () {\n  try {\n    const data: number = await getJSON(API_URL);\n    State.decimalNum = data;\n  } catch (err) {\n    throw err;\n  }\n};\n\nexport const convertNumber = function () {\n  const binaryShort: string = Number(State.decimalNum).toString(2);\n  const length: number = BINARY_LENGTH - binaryShort.length;\n  State.binaryNum = `${'0'.repeat(length)}${binaryShort}`;\n  window.location.hash = `${State.binaryNum}`;\n};\n","import { COLORS } from '../config';\n\nclass TraficLight {\n  private elements: any = document.querySelectorAll('.tlight');\n  private errorMessage: string = \"We can't get a number at the momment.\";\n\n  public yellow() {\n    this.elements.forEach(el => el.classList.add('yellow'));\n  }\n\n  private clear() {\n    this.elements.forEach(el => {\n      el.classList.remove('yellow', 'red', 'green');\n    });\n  }\n\n  public renderColors(binary: string) {\n    this.clear();\n    const numArr: string[] = binary.split('');\n    this.elements.forEach((el: any, elIndex: number) =>\n      numArr.find((_, numIndex: number) => numIndex === elIndex)?.includes('0')\n        ? el.classList.add(COLORS.zero)\n        : el.classList.add(COLORS.one)\n    );\n  }\n}\n\nexport default new TraficLight();\n","import * as model from './model';\nimport traficLightView from './views/traficLightView';\n\nconst controllTraficLight = async function () {\n  try {\n    // (0) GENERATE NEW RANDOM DECIMAL NUMBER\n    traficLightView.yellow();\n    await model.generateNumber();\n\n    // (1) CONVERT DECIMAL NUMBER TO BINARY\n    model.convertNumber();\n\n    // (2) CHANGE LIGHTS ACCORDING TO NUMBER\n    traficLightView.renderColors(model.State.binaryNum);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nconst init = () => {\n  setInterval(() => controllTraficLight(), 1000);\n};\ninit();\n"],"names":["$d0db344ee337f236$export$56d196d2844d1ca1","one","zero","$f12e1d1b11d4e181$export$d047a7c56db64af4","async","url","res","Promise","race","fetch","s","_","reject","setTimeout","Error","data","json","ok","message","status","err","$2667ae993c5ce29d$export$7254cc27399e90bd","decimalNum","binaryNum","$2667ae993c5ce29d$export$a5c28453258e2e31","$590b2f198dded252$export$2e2bcd8739ae039","elements","document","querySelectorAll","errorMessage","yellow","this","forEach","el","classList","add","clear","remove","renderColors","binary","numArr","split","elIndex","find","numIndex","includes","$d1bb9cbb14761302$var$controllTraficLight","binaryShort","Number","toString","length","repeat","window","location","hash","$2667ae993c5ce29d$export$522325fb116d804e","console","log","setInterval"],"version":3,"file":"index.8041d558.js.map"}