{"mappings":"AACO,MAGMA,EAAmB,CAAC,MAAO,SCoB3BC,EAA4BC,eAAgBC,GACvD,IACE,MAAMC,QAAiBC,QAAQC,KAAK,CAACC,MAAMJ,IAbHK,EDXT,GCY1B,IAAIH,SAAQ,SAAUI,EAAGC,GAC9BC,YAAW,WACTD,EAAO,IAAIE,MAAM,wCAAwCJ,Y,GACpD,IAAJA,E,OAUGK,QAAqBT,EAAIU,OAC/B,IAAKV,EAAIW,GAAI,MAAM,IAAIH,MAAM,GAAGR,EAAIY,YAAYZ,EAAIa,WACpD,OAAOJ,C,CACP,MAAOK,GACP,MAAMA,C,CAlBwB,IAAUV,C,ECF/BW,EAAwB,CACnCC,WAAY,EACZC,UAAW,YAKAC,EAAiBpB,iBAC5B,IACE,MAAMW,QAAqBZ,EFnBA,2FEoB3BkB,EAAMC,WAAaP,C,CACnB,MAAOK,GACP,MAAMA,C,OCaVK,EAAe,IAlCf,MACEC,SAAwBC,SAASC,iBAAiB,WAGlDC,OAAcC,EAAQpB,GACpB,OAAOqB,YAAYD,EAAO,IAAJpB,E,CAIxBsB,SACEC,KAAKP,SAASQ,SAASC,GAAYA,EAAGC,UAAUC,IAAI,W,CAItDC,QACEL,KAAKP,SAASQ,SAASC,IACrBA,EAAGC,UAAUG,OAAO,SAAU,MAAO,QAAQ,G,CAKjDC,aAAoBC,GAClBR,KAAKK,QACL,MAAMI,EAAmBD,EAAOE,MAAM,IACtCV,KAAKP,SAASQ,SAAQ,CAACC,EAASS,IAC9BF,EACGG,MAAK,CAAClC,EAAGmC,IAAqBA,IAAaF,KAC1CG,SAASC,OAAO9C,EAAO+C,QAAQ,SAC/Bd,EAAGC,UAAUC,IAAInC,EAAO,IACxBiC,EAAGC,UAAUC,IAAInC,EAAO,K,GC3BlC,MAAMgD,EAAsB9C,iBAC1B,IAEEqB,EAAgBO,eACVR,IFsBmB,WAC3B,MAAM2B,EAAsBC,OAAO/B,EAAMC,YAAY+B,SAAS,GACxDC,EF7B6B,EE6BIH,EAAYG,OACnDjC,EAAME,UAAY,GAAG,IAAIM,OAAOyB,KAAUH,IAC1CI,OAAOC,SAASC,KAAO,GAAGpC,EAAME,W,CEvB9BmC,GAGAjC,EAAgBe,aAAanB,EAAYE,U,CACzC,MAAOH,GACPuC,QAAQC,IAAIxC,E,GAMdK,EAAgBI,OAAOqB,EAAqB","sources":["src/ts/config.ts","src/ts/helpers.ts","src/ts/model.ts","src/ts/views/traficLightView.ts","src/ts/controller.ts"],"sourcesContent":["// VARIABLES\nexport const API_URL: string = `https://www.random.org/integers/?num=1&min=0&max=255&col=1&base=10&format=plain&rnd=new`;\nexport const TIMEOUT_SEC: number = 10;\nexport const BINARY_LENGTH: number = 8;\nexport const COLORS: string[] = ['red', 'green'];\n","// IMPORTS\nimport { TIMEOUT_SEC } from './config';\n\n// INTERFACES\ninterface timeoutInterface {\n  (s: number);\n}\n\ninterface getJSONInterface {\n  (url: string);\n}\n\n// TIMES OUT JSON REQUEST AFTER TIMEOUT_SEC (config.ts)\nconst timeout: timeoutInterface = function (s) {\n  return new Promise(function (_, reject) {\n    setTimeout(function () {\n      reject(new Error(`Request took too long! Timeout after ${s} second`));\n    }, s * 1000);\n  });\n};\n\n// SENDS JSON REQUEST\n// RACES WITH TIMEOUT FUNCTION\n// RETURNS DATA (model.ts)\nexport const getJSON: getJSONInterface = async function (url) {\n  try {\n    const res: any = await Promise.race([fetch(url), timeout(TIMEOUT_SEC)]);\n    const data: number = await res.json();\n    if (!res.ok) throw new Error(`${res.message} (${res.status})`);\n    return data;\n  } catch (err) {\n    throw err;\n  }\n};\n","// IMPORT\nimport { getJSON } from './helpers';\nimport { API_URL, BINARY_LENGTH } from './config';\n\n// INTERFACE\ninterface StateInterface {\n  decimalNum: number;\n  binaryNum: string;\n}\n\n// OBJECT\nexport const State: StateInterface = {\n  decimalNum: 0,\n  binaryNum: '00000000',\n};\n\n// GENERATES RANDOM NUMBER WITH JSON REQUEST\n// STORES IT IN STATE OBJECT\nexport const generateNumber = async function () {\n  try {\n    const data: number = await getJSON(API_URL);\n    State.decimalNum = data;\n  } catch (err) {\n    throw err;\n  }\n};\n\n// CONVERTS GENERATED DECIMAL NUMBER INTO BINARY\n// STORES IT IN STATE OBJECT\n// CHANGES HASH TO THAT BINARY NUMBER\nexport const convertNumber = function () {\n  const binaryShort: string = Number(State.decimalNum).toString(2);\n  const length: number = BINARY_LENGTH - binaryShort.length;\n  State.binaryNum = `${'0'.repeat(length)}${binaryShort}`;\n  window.location.hash = `${State.binaryNum}`;\n};\n","import { COLORS } from '../config';\n\nclass TraficLight {\n  private elements: any = document.querySelectorAll('.tlight');\n\n  // REPEATS ANY FUNCTION\n  public repeat(f: any, s: number) {\n    return setInterval(f, s * 1000);\n  }\n\n  // TURNS ALL TRAFIC LIGHTS YELOW\n  public yellow() {\n    this.elements.forEach((el: any) => el.classList.add('yellow'));\n  }\n\n  // CLEARS ALL CLASSES FROM TRAFIC LIGHTS\n  private clear() {\n    this.elements.forEach((el: any) => {\n      el.classList.remove('yellow', 'red', 'green');\n    });\n  }\n\n  // RENDERS COLOR ACCORDING TO A NUMBER\n  public renderColors(binary: string) {\n    this.clear();\n    const numArr: string[] = binary.split('');\n    this.elements.forEach((el: any, elIndex: number) =>\n      numArr\n        .find((_, numIndex: number) => numIndex === elIndex)\n        ?.includes(String(COLORS.indexOf('red')))\n        ? el.classList.add(COLORS[0])\n        : el.classList.add(COLORS[1])\n    );\n  }\n}\n\nexport default new TraficLight();\n","// IMPORTS\nimport * as model from './model';\nimport traficLightView from './views/traficLightView';\n\nconst controllTraficLight = async function () {\n  try {\n    // (0) GENERATE NEW RANDOM DECIMAL NUMBER\n    traficLightView.yellow();\n    await model.generateNumber();\n\n    // (1) CONVERT DECIMAL NUMBER TO BINARY\n    model.convertNumber();\n\n    // (2) CHANGE LIGHTS ACCORDING TO NUMBER\n    traficLightView.renderColors(model.State.binaryNum);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\n// ON START\nconst init = () => {\n  traficLightView.repeat(controllTraficLight, 1);\n};\ninit();\n"],"names":["$d0db344ee337f236$export$56d196d2844d1ca1","$f12e1d1b11d4e181$export$d047a7c56db64af4","async","url","res","Promise","race","fetch","s","_","reject","setTimeout","Error","data","json","ok","message","status","err","$2667ae993c5ce29d$export$7254cc27399e90bd","decimalNum","binaryNum","$2667ae993c5ce29d$export$a5c28453258e2e31","$590b2f198dded252$export$2e2bcd8739ae039","elements","document","querySelectorAll","repeat","f","setInterval","yellow","this","forEach","el","classList","add","clear","remove","renderColors","binary","numArr","split","elIndex","find","numIndex","includes","String","indexOf","$d1bb9cbb14761302$var$controllTraficLight","binaryShort","Number","toString","length","window","location","hash","$2667ae993c5ce29d$export$522325fb116d804e","console","log"],"version":3,"file":"index.2eb4eb12.js.map"}