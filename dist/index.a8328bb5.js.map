{"mappings":"AACO,MAGMA,EAAmB,CAAC,MAAO,QAAS,UCoBpCC,EAA4BC,eAAgBC,GACvD,IACE,MAAMC,QAAiBC,QAAQC,KAAK,CAACC,MAAMJ,IAbHK,EDXT,GCY1B,IAAIH,SAAQ,SAAUI,EAAGC,GAC9BC,YAAW,WACTD,EAAO,IAAIE,MAAM,wCAAwCJ,Y,GACpD,IAAJA,E,OAUGK,QAAqBT,EAAIU,OAC/B,IAAKV,EAAIW,GAAI,MAAM,IAAIH,MAAM,GAAGR,EAAIY,YAAYZ,EAAIa,WACpD,OAAOJ,C,CACP,MAAOK,GACP,MAAMA,C,CAlBwB,IAAUV,C,ECF/BW,EAAwB,CACnCC,WAAY,EACZC,UAAW,YAKAC,EAAiBpB,iBAC5B,IACE,MAAMW,QAAqBZ,EFnBA,2FEoB3BkB,EAAMC,WAAaP,C,CACnB,MAAOK,GACP,MAAMA,C,OCyBVK,EAAe,IA9Cf,MACEC,SACEC,SAASC,iBAAiB,WAG5BC,OAAcC,EAAQpB,GACpB,OAAOqB,YAAYD,EAAO,IAAJpB,E,CAIxBsB,SACEC,KAAKC,QACLD,KAAKP,SAASS,SACXC,GAAuBA,EAAGC,UAAUC,IAAIpC,EAAO,K,CAKpDgC,QACED,KAAKP,SAASS,SAASC,IACrBlC,EAAOqC,KAAKC,IACVJ,EAAGC,UAAUI,OAAOD,GACpBJ,EAAGM,UAAY,EAAE,GACjB,G,CAKNC,aAAqBP,EAAIQ,GACvB,OAAQR,EAAGM,UAAY,kBAAkBE,O,CAI3CC,YAAmBC,GACjB,MAAMC,EAAmBD,EAAOE,MAAM,IAAIT,KAAKK,GAAgBK,OAAOL,KACtEX,KAAKP,SAASS,SAAQ,CAACC,EAAoBc,IACzCH,EAAOI,MACL,CAACP,EAAaQ,IACZA,IAAaF,GACbjB,KAAKU,aAAaP,EAAIQ,IACtBR,EAAGC,UAAUC,IAAIpC,EAAO0C,O,GCtClC,MAAMS,EAAsBjD,iBAC1B,IAEEqB,EAAgBO,eACVR,IFsBmB,WAC3B,MAAM8B,EAAsBL,OAAO5B,EAAMC,YAAYiC,SAAS,GACxDC,EF7B6B,EE6BIF,EAAYE,OACnDnC,EAAME,UAAY,GAAG,IAAIM,OAAO2B,KAAUF,IAC1CG,OAAOC,SAASC,KAAO,GAAGtC,EAAME,aAAaF,EAAMC,Y,CEvBjDsC,GAGAnC,EAAgBoB,YAAYxB,EAAYE,U,CACxC,MAAOH,GACPyC,QAAQC,IAAI1C,E,GAMdK,EAAgBI,OAAOwB,EAAqB","sources":["src/ts/config.ts","src/ts/helpers.ts","src/ts/model.ts","src/ts/views/traficLightView.ts","src/ts/controller.ts"],"sourcesContent":["// VARIABLES\nexport const API_URL: string = `https://www.random.org/integers/?num=1&min=0&max=255&col=1&base=10&format=plain&rnd=new`;\nexport const TIMEOUT_SEC: number = 10;\nexport const BINARY_LENGTH: number = 8;\nexport const COLORS: string[] = ['red', 'green', 'yellow'];\n","// IMPORTS\nimport { TIMEOUT_SEC } from './config';\n\n// INTERFACES\ninterface timeoutInterface {\n  (s: number);\n}\n\ninterface getJSONInterface {\n  (url: string);\n}\n\n// TIMES OUT JSON REQUEST AFTER TIMEOUT_SEC (config.ts)\nconst timeout: timeoutInterface = function (s) {\n  return new Promise(function (_, reject) {\n    setTimeout(function () {\n      reject(new Error(`Request took too long! Timeout after ${s} second`));\n    }, s * 1000);\n  });\n};\n\n// SENDS JSON REQUEST\n// RACES WITH TIMEOUT FUNCTION\n// RETURNS DATA (model.ts)\nexport const getJSON: getJSONInterface = async function (url) {\n  try {\n    const res: any = await Promise.race([fetch(url), timeout(TIMEOUT_SEC)]);\n    const data: number = await res.json();\n    if (!res.ok) throw new Error(`${res.message} (${res.status})`);\n    return data;\n  } catch (err) {\n    throw err;\n  }\n};\n","// IMPORT\nimport { getJSON } from './helpers';\nimport { API_URL, BINARY_LENGTH } from './config';\n\n// INTERFACE\ninterface StateInterface {\n  decimalNum: number;\n  binaryNum: string;\n}\n\n// OBJECT\nexport const State: StateInterface = {\n  decimalNum: 0,\n  binaryNum: '00000000',\n};\n\n// GENERATES RANDOM NUMBER WITH JSON REQUEST\n// STORES IT IN STATE OBJECT\nexport const generateNumber = async function () {\n  try {\n    const data: number = await getJSON(API_URL);\n    State.decimalNum = data;\n  } catch (err) {\n    throw err;\n  }\n};\n\n// CONVERTS GENERATED DECIMAL NUMBER INTO BINARY\n// STORES IT IN STATE OBJECT\n// CHANGES HASH TO THAT BINARY NUMBER\nexport const convertNumber = function () {\n  const binaryShort: string = Number(State.decimalNum).toString(2);\n  const length: number = BINARY_LENGTH - binaryShort.length;\n  State.binaryNum = `${'0'.repeat(length)}${binaryShort}`;\n  window.location.hash = `${State.binaryNum}=${State.decimalNum}`;\n};\n","import { COLORS } from '../config';\n\nclass TraficLight {\n  private elements: NodeListOf<HTMLDivElement> =\n    document.querySelectorAll('.tlight');\n\n  // REPEATS A FUNCTION(F) EVERY SECOND/S(S)\n  public repeat(f: any, s: number) {\n    return setInterval(f, s * 1000);\n  }\n\n  // TURNS ALL TRAFIC LIGHTS YELOW\n  public yellow() {\n    this.clear();\n    this.elements.forEach(\n      (el: HTMLDivElement) => el.classList.add(COLORS[2]) // 2 IS AN INDEX OF YELLOW IN COLORS ARRAY (config.ts)\n    );\n  }\n\n  // CLEARS ALL CLASSES AND NUMBERS FROM TRAFIC LIGHTS\n  private clear() {\n    this.elements.forEach((el: HTMLDivElement) => {\n      COLORS.map((color: string) => {\n        el.classList.remove(color);\n        el.innerHTML = '';\n      });\n    });\n  }\n\n  // RENDERS NUMBER INSIDE A TRAFIC LIGHT\n  private renderNumber(el, num) {\n    return (el.innerHTML = `<p class=\"num\">${num}</p>`);\n  }\n\n  // RENDERS COLOR DEPENDING TO A NUMBER\n  public renderColor(binary: string) {\n    const numArr: number[] = binary.split('').map((num: string) => Number(num));\n    this.elements.forEach((el: HTMLDivElement, elIndex: number) =>\n      numArr.find(\n        (num: number, numIndex: number) =>\n          numIndex === elIndex &&\n          this.renderNumber(el, num) &&\n          el.classList.add(COLORS[num]) // 0 FOR RED AND 1 FOR GREEN - INDEXES IN COLORS ARRAY (config.ts)\n      )\n    );\n  }\n}\n\nexport default new TraficLight();\n","// IMPORTS\nimport * as model from './model';\nimport traficLightView from './views/traficLightView';\n\nconst controllTraficLight = async function () {\n  try {\n    // (0) GENERATE NEW RANDOM DECIMAL NUMBER\n    traficLightView.yellow();\n    await model.generateNumber();\n\n    // (1) CONVERT DECIMAL NUMBER TO BINARY\n    model.convertNumber();\n\n    // (2) CHANGE LIGHTS ACCORDING TO NUMBER\n    traficLightView.renderColor(model.State.binaryNum);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\n// ON START\nconst init = () => {\n  traficLightView.repeat(controllTraficLight, 1);\n};\ninit();\n"],"names":["$d0db344ee337f236$export$56d196d2844d1ca1","$f12e1d1b11d4e181$export$d047a7c56db64af4","async","url","res","Promise","race","fetch","s","_","reject","setTimeout","Error","data","json","ok","message","status","err","$2667ae993c5ce29d$export$7254cc27399e90bd","decimalNum","binaryNum","$2667ae993c5ce29d$export$a5c28453258e2e31","$590b2f198dded252$export$2e2bcd8739ae039","elements","document","querySelectorAll","repeat","f","setInterval","yellow","this","clear","forEach","el","classList","add","map","color","remove","innerHTML","renderNumber","num","renderColor","binary","numArr","split","Number","elIndex","find","numIndex","$d1bb9cbb14761302$var$controllTraficLight","binaryShort","toString","length","window","location","hash","$2667ae993c5ce29d$export$522325fb116d804e","console","log"],"version":3,"file":"index.a8328bb5.js.map"}